/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.usmanshahid.jflapcli;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;
import java.io.Serializable;
import java.nio.BufferOverflowException;

import com.usmanshahid.jflapcli.grammar.GrammarTester;
import com.usmanshahid.jflapcli.utils.IO;

import edu.duke.cs.jflap.automata.Automaton;
import edu.duke.cs.jflap.automata.SimulatorFactory;
import edu.duke.cs.jflap.automata.AutomatonSimulator;
import edu.duke.cs.jflap.grammar.UnboundGrammar;
import edu.duke.cs.jflap.grammar.parse.BruteParser;

import java.lang.IllegalArgumentException;



@Command(name = "jflapcli", subcommands = { RunOnce.class, CommandLine.HelpCommand.class }, description = "JFLAP cli utility")
public class JflapCli {
    public static void main(String[] args) {
        int exitCode = new CommandLine(new JflapCli()).execute(args); 
        System.exit(exitCode);
    }
}



@Command(name = "runonce", description = "Test strings from a file on automata")
class RunOnce implements Runnable {
    @Parameters(paramLabel = "FILEPATH", description = "JFLAP file to load")
    private String filepath;

    @Option(names = {"-i", "--input-file"}, description = "File containing input strings to test")
    private String inputFile;

    @Override
    public void run() {
        Serializable jflapObj = IO.loadJflapFile(this.filepath);
        if (jflapObj instanceof edu.duke.cs.jflap.automata.fsa.FiniteStateAutomaton ||
            jflapObj instanceof edu.duke.cs.jflap.automata.pda.PushdownAutomaton ||
            jflapObj instanceof edu.duke.cs.jflap.automata.turing.TuringMachine ||
            jflapObj instanceof edu.duke.cs.jflap.automata.mealy.MooreMachine ||
            jflapObj instanceof edu.duke.cs.jflap.automata.mealy.MealyMachine) {

            Automaton automaton = (Automaton) jflapObj;
            AutomatonSimulator sim = SimulatorFactory.getSimulator(automaton);
            if (sim == null) {
                throw new RuntimeException("Cannot load an automaton simulator for " + automaton.getClass());
            }

            // Read input file and test each string
            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
                String inputString;
                while ((inputString = reader.readLine()) != null) {
                    boolean accept = sim.simulateInput(inputString);
                    System.out.println("Input: " + inputString + " Accepted: " + accept);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else if (jflapObj instanceof edu.duke.cs.jflap.regular.RegularExpression) {
            System.out.println("regex");
        } else if (jflapObj instanceof edu.duke.cs.jflap.grammar.UnboundGrammar) {
            UnboundGrammar g = (UnboundGrammar) jflapObj;
            GrammarTester tester = new GrammarTester(g);

            // Read input file and test each string
            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
                String inputString;
                while ((inputString = reader.readLine()) != null) {
                    System.out.println("Input: " + inputString + " Can generate: " + tester.canGenerate(inputString));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            throw new RuntimeException("Cannot handle JFLAP object of type " + jflapObj.getClass());
        }
    }
}

